#!/bin/bash
# sccyou
# script to apply the readeia608 filter and interpret the results in order to create an scc (and optionally an srt) output from standard definition video files which contain EIA 608 data
# thanks to Paul Mahol, Ben Turkus
# Copyright (c) 2019-2024, Dave Rice, see License.txt

VERSION="0.2"

SEARCH_FIRST_X_SECONDS_FOR_CAPTION_LINE=20

SCRIPTDIR="$(dirname "${0}")"
FFMPEG_INPUT_OPTIONS+=(-v 0)
FFPROBE_INPUT_OPTIONS+=(-v 0)

_usage(){
cat <<EOF
$(basename "${0}") ${VERSION}

  Usage
   $(basename "${0}") [OPTIONS] MOVIE_FILE_1.mov [ MOVIE_FILE_2.mov ... ]

  Options
   -h           display this help
   -o <dir>     write output files to the provided directory (default is
                next to the input file)
   -s           make an srt output as well as scc
   -y           overwrite any existing output files
   -v           let ffmpeg be verbose, otherwise ffmpeg sdterr is hidden

  Caption Discovery
   The location of the captions may either be specified as a line of a
   specified number of seconds may be searched to find captions. Note
   that searching for the caption line takes time, so providing the '-l'
   option to specify the line to use is faster.

   -l <line>    specify the line where caption data should be read,
                otherwise the first ${SEARCH_FIRST_X_SECONDS_FOR_CAPTION_LINE} lines will be searched.
   -t <secs>    specify an amount of time in seconds for which to search
                for captions, ${SEARCH_FIRST_X_SECONDS_FOR_CAPTION_LINE} is used by default. By default the first 20
                seconds of the video is searched.

  Outcome
   will create MOVIE_FILE.scc and MOVIE_FILE.srt

  Information about the scc format is available at http://www.theneitherworld.com/mcpoodle/SCC_TOOLS/DOCS/

  Dependencies: ffmpeg 4.3 or later
  
 -F <path> (provide a custom ffmpeg path. ffprobe is presumed to neighbor ffmpeg)

  If an ffmpeg binary is provided with the '-F <path>' option that will be used,
  else if an ffmpeg binary exists within the same directory of sccyou, that will
  be used. Else it will use $(which ffmpeg).

  How tos:

   Playback movie with the scc file
    ffplay MOVIE_FILE.mov -vf subtitles=MOVIE_FILE.scc

EOF
}

_mkdir2(){
    local DIR2MAKE=""
    while [ "${*}" != "" ] ; do
        DIR2MAKE="${1}"
        if [ ! -d "${DIR2MAKE}" ] ; then
            mkdir -p "${DIR2MAKE}"
            if [ "${?}" -ne 0 ]; then
                _report -wt "${0}: Can't create directory at ${DIR2MAKE}"
                exit 1
            fi
        fi
        shift
    done
}

_report(){
    local RED="$(tput setaf 1)"   # Red      - For Warnings
    local GREEN="$(tput setaf 2)" # Green    - For Declarations
    local BLUE="$(tput setaf 4)"  # Blue     - For Questions
    local NC="$(tput sgr0)"       # No Color
    local COLOR=""
    local STARTMESSAGE=""
    local ENDMESSAGE=""
    local ECHOOPT=""
    local LOG_MESSAGE=""
    OPTIND=1
    while getopts ":qdwstn" OPT; do
        case "${OPT}" in
            q) COLOR="${BLUE}" ;;                         # question mode, use color blue
            d) COLOR="${GREEN}" ;;                        # declaration mode, use color green
            w) COLOR="${RED}" ; LOG_MESSAGE="Y" ;;        # warning mode, use color red
            s) STARTMESSAGE+=([$(basename "${0}")] ) ;;   # prepend scriptname to the message
            t) STARTMESSAGE+=($(_get_iso8601) '- ' ) ;;   # prepend timestamp to the message
            n) ECHOOPT="-n" ;;                            # to avoid line breaks after echo
        esac
    done
    shift $(( OPTIND - 1 ))
    MESSAGE="${1}"
    echo "${ECHOOPT}" "${COLOR}${STARTMESSAGE[@]}${MESSAGE}${NC}"
    [ "${LOG_MESSAGE}" = "Y" ]
}

_hhmmssmmm_to_hhmmssff(){
    tc="$1"
    echo "$tc" | awk -F "[:.]" '{ printf "%02i:%02i:%02i:%02i\n", $1, $2, $3, substr($4,1,3)*(30/1000) }'
}

_get_line(){
    LINE_SELECT="$("${FFMPEG_PATH}" -i "${MOVIE}" -vf "readeia608=lp=1:spw=${SPW},metadata=mode=print:key=lavfi.readeia608.0.line" -t "${SEARCH_FIRST_X_SECONDS_FOR_CAPTION_LINE}" -f null - 2>&1 | grep -o "lavfi.readeia608.0.line=[0-9]*" | cut -d= -f2 | sort | uniq -c | sort -n -r | head -n 1 | awk '{print $2}')"
}

_get_cc(){
    # this function tests for the presence of caption data on the specified line, if the result is non-empty then there are captions read
    LINE="${1}"
    SPW=0.27
    AMOUNT_TO_REPORT=10
    CC_SELECT="$("${FFMPEG_PATH}" -i "${MOVIE}" -vf "format=rgb24,crop=iw:1:0:${LINE},readeia608=spw=${SPW},metadata=mode=print:key=lavfi.readeia608.0.cc" -t "${SEARCH_FIRST_X_SECONDS_FOR_CAPTION_LINE}" -f null - 2>&1 | grep -o "lavfi.readeia608.0.cc=0x[A-F0-9]*" | cut -d= -f2 | head -n "${AMOUNT_TO_REPORT}" | xargs)"
}

_get_caption_settings(){
    # test ratio of width reserved for sync code detection at both 0.3 and 0.27
    SPW="0.30"
    if [[ -n "${LINE_SELECT_USER}" ]] ; then
        _get_cc "${LINE_SELECT_USER}"
        if [[ -z "${CC_SELECT}" ]] ; then
            SPW="0.27"
            _get_cc "${LINE_SELECT_USER}"
        fi
        if [[ -z "${CC_SELECT}" ]] ; then
            _report -w "Sadly no caption data is detected in the first ${SEARCH_FIRST_X_SECONDS_FOR_CAPTION_LINE} seconds of ${MOVIE} on line ${LINE_SELECT_USER}."
            _report -w "To increase how many seconds are used to test for captions, use the '-t' option."
            _report -w "Or try a different line with the '-l' option, or let sccyou discover which line the captions are on by omitting the '-l' option."
            break
        else
            LINE_SELECT="${LINE_SELECT_USER}"
        fi
    else
        _get_line "${MOVIE}"
        if [[ -z "${LINE_SELECT}" ]] ; then
            SPW="0.27"
            _get_line "${MOVIE}"
        fi
        if [[ -z "${LINE_SELECT}" ]] ; then
            _report -w "Sadly no caption data is detected in the first ${SEARCH_FIRST_X_SECONDS_FOR_CAPTION_LINE} seconds of ${MOVIE}."
            _report -w "To increase how many seconds are used to test for captions, use the '-t' option."
            break
        fi
    fi
    _report -d "Found captions in ${MOVIE}, using spw=${SPW} and line ${LINE_SELECT}."
}

_write_cc(){
    CC="$1"
    if [[ "$START" == "Y" ]] ; then
        echo -n "	${CC}" >> "${SCC_OUT}"
    else
        echo -n " ${CC}" >> "${SCC_OUT}"
    fi
    START="N"
}

_write_new_cc_line(){
    SCC_TIME="$(_hhmmssmmm_to_hhmmssff "${SECS}")"
    echo -e -n "\n\n${SCC_TIME}" >> "${SCC_OUT}"
    START="Y"
}

_start_scc(){
    echo -n "Scenarist_SCC V1.0" > "${SCC_OUT}"
}

_end_scc(){
    echo >> "${SCC_OUT}"
}

while getopts ":hsyo:l:t:vF:" OPT ; do
    case "${OPT}" in
        h) _usage ; exit 0 ;;
        s) SRT_OUTPUT="y" ;;
        y) FFMPEG_INPUT_OPTIONS+=(-y) ; OVERWRITE="sure" ;;
        o) OUTPUT_DIR="${OPTARG}" ;;
        l) LINE_SELECT_USER="${OPTARG}" ;;
        t) SEARCH_FIRST_X_SECONDS_FOR_CAPTION_LINE="${OPTARG}" ;;
        v) unset FFMPEG_INPUT_OPTIONS ; unset FFPROBE_INPUT_OPTIONS ;;
        F) FFMPEG_PATH="${OPTARG}" ;;
        *) echo "bad option -${OPTARG}" ; _usage ; exit 1 ;;
    esac
done
shift $(( OPTIND - 1 ))

# if FFMPEG_PATH wasn't provided as an argument then see if one is installed
if [[ -z "${FFMPEG_PATH}" ]] ; then
    FFMPEG_GUESS="${SCRIPTDIR}/ffmpeg"
    if [[ -x "${FFMPEG_GUESS}" ]] ; then
        FFMPEG_PATH="${FFMPEG_GUESS}"
    else
        FFMPEG_PATH="$(which ffmpeg)"
    fi
fi
FFPROBE_GUESS="$(dirname "${FFMPEG_PATH}")/ffprobe"
if [[ -x "${FFPROBE_GUESS}" ]] ; then
    FFPROBE_PATH="${FFPROBE_GUESS}"
else
    FFPROBE_PATH="$(which ffprobe)"
fi

FFMPEG_INPUT_OPTIONS+=(-hide_banner)
FFPROBE_INPUT_OPTIONS+=(-hide_banner)

if [[ "${*}" == "" ]] ; then
    _usage
    exit
fi

while [[ "${*}" != "" ]] ; do
    MOVIE="${1}"
    if [[ -n "${OUTPUT_DIR}" ]] ; then
        MOVIE_BN="$(basename "${MOVIE}")"
        SCC_OUT="${OUTPUT_DIR}/${MOVIE_BN%.*}.scc"
        SRT_OUT="${OUTPUT_DIR}/${MOVIE_BN%.*}.srt"
        if [[ ! -d "${OUTPUT_DIR}" ]] ; then
            _mkdir2 "${OUTPUT_DIR}"
        fi
    else
        SCC_OUT="${MOVIE%.*}.scc"
        SRT_OUT="${MOVIE%.*}.srt"
    fi
    shift

    if [[ "${OVERWRITE}" != "sure" ]] ; then
        if [[ -f "${SCC_OUT}" ]] ; then
            _report -w "${SCC_OUT} already exists"
            break
        fi
        if [[ -f "${SRT_OUT}" ]] && [[ "${SRT_OUTPUT}"  == "y" ]] ; then
            _report -w "${SRT_OUT} already exists"
            break
        fi
    fi

    _get_caption_settings "${MOVIE}"
    _start_scc

    _report -d "Working on ${MOVIE}, preview with:"
    _report -q "    ffplay \"${MOVIE}\" -vf subtitles=\"${SCC_OUT}\""
    _report -d "Or to zoom in on the captions try:"
    _report -q "    ffplay \"${MOVIE}\" -vf format=rgb24,crop=iw:1:0:${LINE_SELECT},scale=iw:4:flags=neighbor,tile=layout=1x120:overlap=119:init_padding=119,setdar=4/3,subtitles=\"${SCC_OUT}\""

    PREV_CC="8080"
    CC_PRESENT=0
    while IFS="," read FRAME SECS CC_HEX ; do
        if [[ -n "${CC_HEX}" ]] ; then
            CC="${CC_HEX:2:4}"
            if { [[ "${CC}" != "8080" ]] && [[ "${PREV_CC}" == "8080" ]] ; } || { [[ "${CC}" == "9420" ]] && [[ "${PREV_CC}" != "9420" ]] ; } ; then
                _write_new_cc_line
                _write_cc "$CC"
            elif [[ "${CC}" != "8080" ]] ; then
                _write_cc "$CC"
            fi
            PREV_CC="$CC"
            if [[ "$CC_PRESENT" == 0 ]] ; then
                CC_PRESENT=1
                if [[ -n "${CC_LOG}" ]] ; then
                    TRANSITION_TIME="$(_hhmmssmmm_to_hhmmssff "${SECS}")"
                    _report -d "${CC_LOG} - ${TRANSITION_TIME}."
                fi
                TRANSITION_TIME="$(_hhmmssmmm_to_hhmmssff "${SECS}")"
                CC_LOG="Caption data  ON: ${TRANSITION_TIME}"
            fi
        else
            if [[ "$CC_PRESENT" == 1 ]] ; then
                CC_PRESENT=0
                if [[ -n "${CC_LOG}" ]] ; then
                    TRANSITION_TIME="$(_hhmmssmmm_to_hhmmssff "${SECS}")"
                    _report -d "${CC_LOG} - ${TRANSITION_TIME}."
                fi
                TRANSITION_TIME="$(_hhmmssmmm_to_hhmmssff "${SECS}")"
                CC_LOG="Caption data OFF: ${TRANSITION_TIME}"
            fi
            PREV_CC="8080"
        fi
        PREV_SECS="$SECS"
    done < <("${FFPROBE_PATH}" "${FFPROBE_INPUT_OPTIONS[@]}" -sexagesimal -f lavfi -i movie="${MOVIE},format=rgb24,crop=iw:1:0:${LINE_SELECT},readeia608=lp=1:spw=${SPW}" -show_entries frame=best_effort_timestamp_time:frame_tags=lavfi.readeia608.0.cc -of csv)
    TRANSITION_TIME="$(_hhmmssmmm_to_hhmmssff "${PREV_SECS}")"
    _report -d "${CC_LOG} - ${TRANSITION_TIME}."
    _end_scc
    if [[ "${SRT_OUTPUT}"  == "y" ]] ; then
        "${FFMPEG_PATH}" "${FFMPEG_INPUT_OPTIONS[@]}" -i "${SCC_OUT}" "${SRT_OUT}"
    fi

    _report -d "Done with ${MOVIE}. We hope you like ${SCC_OUT}."
done
